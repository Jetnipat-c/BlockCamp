/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Bank {
  export type AccountStruct = {
    name: PromiseOrValue<string>;
    balance: PromiseOrValue<BigNumberish>;
  };

  export type AccountStructOutput = [string, BigNumber] & {
    name: string;
    balance: BigNumber;
  };
}

export interface BankInterface extends utils.Interface {
  functions: {
    "createBankAccount(string)": FunctionFragment;
    "deposit(string)": FunctionFragment;
    "getBalance()": FunctionFragment;
    "getBankAccount(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createBankAccount"
      | "deposit"
      | "getBalance"
      | "getBankAccount"
      | "owner"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createBankAccount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBankAccount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "createBankAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBankAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;

  events: {
    "createBankAccountEvent(string,uint256)": EventFragment;
    "depositEvent(uint256)": EventFragment;
    "transferEvent(uint256)": EventFragment;
    "withdrawEvent(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "createBankAccountEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "depositEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "transferEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "withdrawEvent"): EventFragment;
}

export interface createBankAccountEventEventObject {
  _bankAccount: string;
  res: BigNumber;
}
export type createBankAccountEventEvent = TypedEvent<
  [string, BigNumber],
  createBankAccountEventEventObject
>;

export type createBankAccountEventEventFilter =
  TypedEventFilter<createBankAccountEventEvent>;

export interface depositEventEventObject {
  arg0: BigNumber;
}
export type depositEventEvent = TypedEvent<
  [BigNumber],
  depositEventEventObject
>;

export type depositEventEventFilter = TypedEventFilter<depositEventEvent>;

export interface transferEventEventObject {
  arg0: BigNumber;
}
export type transferEventEvent = TypedEvent<
  [BigNumber],
  transferEventEventObject
>;

export type transferEventEventFilter = TypedEventFilter<transferEventEvent>;

export interface withdrawEventEventObject {
  arg0: BigNumber;
}
export type withdrawEventEvent = TypedEvent<
  [BigNumber],
  withdrawEventEventObject
>;

export type withdrawEventEventFilter = TypedEventFilter<withdrawEventEvent>;

export interface Bank extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BankInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createBankAccount(
      _bankAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _bankAccount: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBankAccount(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Bank.AccountStructOutput]>;

    owner(overrides?: CallOverrides): Promise<[string]>;
  };

  createBankAccount(
    _bankAccount: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _bankAccount: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getBankAccount(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Bank.AccountStructOutput>;

  owner(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    createBankAccount(
      _bankAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      _bankAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getBankAccount(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Bank.AccountStructOutput>;

    owner(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "createBankAccountEvent(string,uint256)"(
      _bankAccount?: null,
      res?: null
    ): createBankAccountEventEventFilter;
    createBankAccountEvent(
      _bankAccount?: null,
      res?: null
    ): createBankAccountEventEventFilter;

    "depositEvent(uint256)"(arg0?: null): depositEventEventFilter;
    depositEvent(arg0?: null): depositEventEventFilter;

    "transferEvent(uint256)"(arg0?: null): transferEventEventFilter;
    transferEvent(arg0?: null): transferEventEventFilter;

    "withdrawEvent(uint256)"(arg0?: null): withdrawEventEventFilter;
    withdrawEvent(arg0?: null): withdrawEventEventFilter;
  };

  estimateGas: {
    createBankAccount(
      _bankAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      _bankAccount: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getBankAccount(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createBankAccount(
      _bankAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _bankAccount: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBankAccount(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
