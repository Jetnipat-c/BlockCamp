/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { SCB, SCBInterface } from "../../../contracts/BankV2.sol/SCB";

const _abi = [
  {
    inputs: [],
    name: "_totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
    ],
    name: "createAccount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
    ],
    name: "getAddressByName",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "getNameByAddress",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610d26806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063298daf5b146100675780632a48ac9a146100835780633eaaf86b1461009f5780637c80bb4f146100bd5780639a65ddec146100ed578063b5884e941461011d575b600080fd5b610081600480360381019061007c91906107c9565b61014d565b005b61009d600480360381019061009891906108a6565b6102ad565b005b6100a761040a565b6040516100b49190610924565b60405180910390f35b6100d760048036038101906100d2919061093f565b610410565b6040516100e491906109f4565b60405180910390f35b610107600480360381019061010291906107c9565b6104e0565b6040516101149190610a25565b60405180910390f35b61013760048036038101906101329190610a40565b610528565b6040516101449190610924565b60405180910390f35b600073ffffffffffffffffffffffffffffffffffffffff166001826040516101759190610aeb565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146101fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f190610b4e565b60405180910390fd5b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020908051906020019061024c9291906105cc565b503360018260405161025e9190610aeb565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016102ea93929190610b6e565b602060405180830381600087803b15801561030457600080fd5b505af1158015610318573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033c9190610bdd565b5080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208460405161038b9190610aeb565b908152602001604051809103902060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103e59190610c39565b9250508190555080600360008282546103fe9190610c39565b92505081905550505050565b60035481565b60606000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805461045b90610cbe565b80601f016020809104026020016040519081016040528092919081815260200182805461048790610cbe565b80156104d45780601f106104a9576101008083540402835291602001916104d4565b820191906000526020600020905b8154815290600101906020018083116104b757829003601f168201915b50505050509050919050565b60006001826040516104f29190610aeb565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020836040516105779190610aeb565b908152602001604051809103902060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490509392505050565b8280546105d890610cbe565b90600052602060002090601f0160209004810192826105fa5760008555610641565b82601f1061061357805160ff1916838001178555610641565b82800160010185558215610641579182015b82811115610640578251825591602001919060010190610625565b5b50905061064e9190610652565b5090565b5b8082111561066b576000816000905550600101610653565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6106d68261068d565b810181811067ffffffffffffffff821117156106f5576106f461069e565b5b80604052505050565b600061070861066f565b905061071482826106cd565b919050565b600067ffffffffffffffff8211156107345761073361069e565b5b61073d8261068d565b9050602081019050919050565b82818337600083830152505050565b600061076c61076784610719565b6106fe565b90508281526020810184848401111561078857610787610688565b5b61079384828561074a565b509392505050565b600082601f8301126107b0576107af610683565b5b81356107c0848260208601610759565b91505092915050565b6000602082840312156107df576107de610679565b5b600082013567ffffffffffffffff8111156107fd576107fc61067e565b5b6108098482850161079b565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061083d82610812565b9050919050565b61084d81610832565b811461085857600080fd5b50565b60008135905061086a81610844565b92915050565b6000819050919050565b61088381610870565b811461088e57600080fd5b50565b6000813590506108a08161087a565b92915050565b6000806000606084860312156108bf576108be610679565b5b600084013567ffffffffffffffff8111156108dd576108dc61067e565b5b6108e98682870161079b565b93505060206108fa8682870161085b565b925050604061090b86828701610891565b9150509250925092565b61091e81610870565b82525050565b60006020820190506109396000830184610915565b92915050565b60006020828403121561095557610954610679565b5b60006109638482850161085b565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156109a657808201518184015260208101905061098b565b838111156109b5576000848401525b50505050565b60006109c68261096c565b6109d08185610977565b93506109e0818560208601610988565b6109e98161068d565b840191505092915050565b60006020820190508181036000830152610a0e81846109bb565b905092915050565b610a1f81610832565b82525050565b6000602082019050610a3a6000830184610a16565b92915050565b600080600060608486031215610a5957610a58610679565b5b6000610a678682870161085b565b935050602084013567ffffffffffffffff811115610a8857610a8761067e565b5b610a948682870161079b565b9250506040610aa58682870161085b565b9150509250925092565b600081905092915050565b6000610ac58261096c565b610acf8185610aaf565b9350610adf818560208601610988565b80840191505092915050565b6000610af78284610aba565b915081905092915050565b7f616c7265616479206163636f756e740000000000000000000000000000000000600082015250565b6000610b38600f83610977565b9150610b4382610b02565b602082019050919050565b60006020820190508181036000830152610b6781610b2b565b9050919050565b6000606082019050610b836000830186610a16565b610b906020830185610a16565b610b9d6040830184610915565b949350505050565b60008115159050919050565b610bba81610ba5565b8114610bc557600080fd5b50565b600081519050610bd781610bb1565b92915050565b600060208284031215610bf357610bf2610679565b5b6000610c0184828501610bc8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c4482610870565b9150610c4f83610870565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610c8457610c83610c0a565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610cd657607f821691505b60208210811415610cea57610ce9610c8f565b5b5091905056fea264697066735822122009c45a53e43adfae3e1eb0e0c16ae7c2a85399df5ceab8844bb4c38af0b1d6a364736f6c63430008090033";

type SCBConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SCBConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SCB__factory extends ContractFactory {
  constructor(...args: SCBConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SCB> {
    return super.deploy(overrides || {}) as Promise<SCB>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SCB {
    return super.attach(address) as SCB;
  }
  override connect(signer: Signer): SCB__factory {
    return super.connect(signer) as SCB__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SCBInterface {
    return new utils.Interface(_abi) as SCBInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): SCB {
    return new Contract(address, _abi, signerOrProvider) as SCB;
  }
}
